#!/usr/bin/perl

package BotModules::YouTube;
use XML::Simple;
use LWP::Simple;
use URI qw();
use URI::QueryParam qw();
use JSON;
use vars qw(@ISA);
@ISA = qw(BotModules);
1;

# https://developers.google.com/api-client-library/python/guide/aaa_apikeys
my $APIKEY = 'API_KEY_GOES_HERE';

my @blacklist = ();

sub printTitle {
	my $self = shift;
	my ($event, $vid_id) = @_;

	# Leaving the old URL here for reference
	#my $url = 'http://gdata.youtube.com/feeds/api/videos?v=2&q='.$vid_id.'&max-results=1&fields=entry(title,yt:rating,yt:statistics)&prettyprint=true';
	#my $url = 'http://gdata.youtube.com/feeds/api/videos/'.$vid_id.'?v=2&fields=title,yt:rating,yt:statistics&prettyprint=true';
	my $url =  'https://www.googleapis.com/youtube/v3/videos?part=statistics%2Csnippet&id='.$vid_id.'&fields=items(snippet%2Cstatistics)&key='.$APIKEY;

	my $json_decoder = new JSON;
	my $json = $json_decoder->decode(get($url));

	if (scalar $json->{'items'} eq 0) {
		return '';
	}

	my $item = $json->{'items'}[0];
	my $title = $item->{'snippet'}->{'title'};

	if ($title eq '') {
		return '';
	}

	my $views = $item->{'statistics'}->{'viewCount'};
	$views =~ s/(\d)(?=(\d{3})+(\D|$))/$1\,/g;
	my $likes = $item->{'statistics'}->{'likeCount'};
	$likes =~ s/(\d)(?=(\d{3})+(\D|$))/$1\,/g;
	my $dislikes = $item->{'statistics'}->{'dislikeCount'};
	$dislikes =~ s/(\d)(?=(\d{3})+(\D|$))/$1\,/g;

	return $title.' ['.$likes.' / '.$dislikes.' : '.$views.' views]';
}

sub getPlaylistInfo {
	my $self = shift;
	my ($event, $playlist_id) = @_;

	my $url =  'https://www.googleapis.com/youtube/v3/playlists?part=snippet&id='.$playlist_id.'&key='.$APIKEY;

	my $json_decoder = new JSON;
	my $json = $json_decoder->decode(get($url));

	if (scalar $json->{'items'} eq 0) {
		return '';
	}

	my $item = $json->{'items'}[0];
	my $title = $item->{'snippet'}->{'title'};
	my $description = $item->{'snippet'}->{'description'};

	if ($title eq '') {
		return '';
	}

	return $title.' - '.$description;
}

sub HeardVid {
	my $self = shift;
	my ($event, $url) = @_;

	my $link = URI->new($url);
	my $vid_id = $link->query_param('v');
	my $title = $self->printTitle($event, $vid_id);

	if ($title ne '') {
		$self->say($event, "$title");
	}
}

sub HeardPlaylist {
	my $self = shift;
	my ($event, $url) = @_;

	my $link = URI->new($url);
	my $playlist_id = $link->query_param('list');
	my $title = $self->getPlaylistInfo($event, $playlist_id);

	if ($title ne '') {
		$self->say($event, "$title");
	}
}

sub ToldVid {
	my $self = shift;
	my ($event, $url) = @_;

	my $link = URI->new($url);
	my $vid_id = $link->query_param('v');
	my $title = $self->printTitle($event, $vid_id);

	if ($title ne '') {
		$self->say($event, "$event->{'from'}: $title");
	}
}

sub ToldPlaylist {
	my $self = shift;
	my ($event, $url) = @_;

	my $link = URI->new($url);
	my $playlist_id = $link->query_param('list');
	my $title = $self->getPlaylistInfo($event, $playlist_id);

	if ($title ne '') {
		$self->say($event, "$event->{'from'}: $title");
	}
}

sub Heard {
     my $self = shift;
     my ($event, $message) = @_;

	for (my $i=0; $i<scalar(@blacklist); $i++) {
		if (($event->{'from'} =~ m/$blacklist[$i]/) || ($event->{'user'} =~ m/$blacklist[$i]/)) {
			return $self->SUPER::Heard(@_);
		}
     }

     if (my ($url) = $message =~ m/.*(https?:\/\/w*m?\.?youtube\.com\/playlist\?list=[0-9a-zA-Z_?=&]+)\s*.*$/osi) {
		$self->HeardPlaylist($event, $url);
     } elsif (my ($url) = $message =~ m/.*(https?:\/\/youtu\.be\/playlist\?list=[0-9a-zA-Z_?=&]+)\s*.*$/osi) {
		$self->HeardPlaylist($event, $url);
     } elsif (my ($url) = $message =~ m/.*(https?:\/\/w*m?\.?youtube\.com\/[0-9a-zA-Z_?=&-]+)\s*.*$/osi) {
		$self->HeardVid($event, $url);
     } elsif (my ($url) = $message =~ m/.*(https?:\/\/youtu\.be\/[0-9a-zA-Z_?=&-]+)\s*.*$/osi) {
		my $link = URI->new($url);

		my $uri = $link->path;
		$uri =~ s/^\//http:\/\/www.youtube.com\/?v=/;

		$self->HeardVid($event, $uri);
	} else {
		return $self->SUPER::Heard(@_);
	}

	return 0;
}

sub Told {
     my $self = shift;
     my ($event, $message) = @_;

	for (my $i=0; $i<scalar(@blacklist); $i++) {
		if (($event->{'from'} =~ m/$blacklist[$i]/) || ($event->{'user'} =~ m/$blacklist[$i]/)) {
			return $self->SUEPER::Told(@_);
		}
     }

     if (my ($url) = $message =~ m/.*(https?:\/\/w*m?\.?youtube\.com\/playlist\?list=[0-9a-zA-Z_?=&]+)\s*.*$/osi) {
		$self->ToldPlaylist($event, $url);
     } elsif (my ($url) = $message =~ m/.*(https?:\/\/youtu\.be\/playlist\?list=[0-9a-zA-Z_?=&]+)\s*.*$/osi) {
		$self->ToldPlaylist($event, $url);
     } elsif (my ($url) = $message =~ m/.*(https?:\/\/w*m?\.?youtube\.com\/[0-9a-zA-Z_?=&]+)\s*.*$/osi) {
		$self->ToldVid($event, $url);
     } elsif (my ($url) = $message =~ m/.*(https?:\/\/youtu\.be\/[0-9a-zA-Z_?=&]+)\s*.*$/osi) {
		my $link = URI->new($url);

		my $uri = $link->path;
		$uri =~ s/^\//http:\/\/www.youtube.com\/?v=/;
		
		$self->ToldVid($event, $uri);
	} else {
		return $self->SUPER::Told(@_);
	}

	return 0;
}